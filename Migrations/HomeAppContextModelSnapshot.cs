// <auto-generated />
using System;
using Home_app.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Home_app.Migrations
{
    [DbContext(typeof(HomeAppContext))]
    partial class HomeAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventTag", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.HasKey("EventId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("EventTag");
                });

            modelBuilder.Entity("Home_app.Models.Calendar.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("Finished")
                        .HasColumnType("boolean");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Home_app.Models.Calendar.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Home_app.Models.Health.HealthRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("BodyWeight")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("HealthRecords");
                });

            modelBuilder.Entity("Home_app.Models.Health.Lift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Exercise")
                        .HasColumnType("integer");

                    b.Property<Guid?>("HealthRecordId")
                        .HasColumnType("uuid");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("HealthRecordId");

                    b.ToTable("Lifts");
                });

            modelBuilder.Entity("Home_app.Models.Health.Measurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BodyPart")
                        .HasColumnType("integer");

                    b.Property<double>("Diameter")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("HealthRecordId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("HealthRecordId");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("Home_app.Models.Server.ServerInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AvailableMemory")
                        .HasColumnType("numeric(20,0)");

                    b.Property<double?>("CpuTemperature")
                        .HasColumnType("double precision");

                    b.Property<double>("CpuUsagePercentage")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("GpuMemory")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("GpuName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("TotalMemory")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.ToTable("ServerInfos");
                });

            modelBuilder.Entity("EventTag", b =>
                {
                    b.HasOne("Home_app.Models.Calendar.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Home_app.Models.Calendar.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Home_app.Models.Health.Lift", b =>
                {
                    b.HasOne("Home_app.Models.Health.HealthRecord", null)
                        .WithMany("Lifts")
                        .HasForeignKey("HealthRecordId");
                });

            modelBuilder.Entity("Home_app.Models.Health.Measurement", b =>
                {
                    b.HasOne("Home_app.Models.Health.HealthRecord", null)
                        .WithMany("Measurements")
                        .HasForeignKey("HealthRecordId");
                });

            modelBuilder.Entity("Home_app.Models.Health.HealthRecord", b =>
                {
                    b.Navigation("Lifts");

                    b.Navigation("Measurements");
                });
#pragma warning restore 612, 618
        }
    }
}
